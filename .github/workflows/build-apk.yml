name: Build APK

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true # Fetch submodules as well
          submodules_recursive: true

      # Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # Pull Flutter Docker image
      - name: Pull Flutter Docker image
        run: |
          docker pull ghcr.io/cirruslabs/flutter:latest

      # Decode and save the keystore file
      - name: Prepare Keystore
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/saturn.jks

        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      # Run the build script in Docker container
      - name: Build APK in Docker
        run: |
          docker run --name flutter -v $(pwd):/mobile -w /mobile ghcr.io/cirruslabs/flutter bash -c "
            git submodule init
            git submodule update --remote --merge
            submodule_paths=\$(git submodule status | awk '{ print \$2 }')
            for submodule in \$submodule_paths; do
              echo 'Processing submodule \$submodule'
              cd \$submodule
              flutter pub get
              dart run build_runner clean
              dart run build_runner build --delete-conflicting-outputs
              flutter clean
              cd ..
            done
            flutter pub get
            flutter build apk --release --no-shrink \
              --dart-define=KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD} \
              --dart-define=KEY_PASSWORD=${KEY_PASSWORD} \
              --dart-define=KEY_ALIAS=${KEY_ALIAS} \
              --dart-define=KEYSTORE_PATH=android/app/saturn.jks
          "

        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

      # Archive the APK as an artifact
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      # Clean up Docker container after the build
      - name: Clean up Docker container
        run: docker rm -f flutter